<%?
 var httpProtocol = VTRequest.Url.protocol;
 var wsProtocol   = VTRequest.Url.protocol == "https" ? "wss" :"ws";
  
 var httpBaseUrl$ = VTRequest.Url.origin;  
 var wsBaseUrl$  =  wsProtocol +'://'+VTRequest.Url.hostname();
 var appBaseUrl$ = httpBaseUrl$ +VTRequest.Url.path.substring(0,VTRequest.Url.path.lastIndexOf("/"));
 
 VTConsole.log("httpBaseUrl="+httpBaseUrl$);
 VTConsole.log("appBaseUrl="+appBaseUrl$);
 VTConsole.log("wsBaseUrl="+wsBaseUrl$);
~%>


<!DOCTYPE html>
<html>
<head>
	<title>Voicetailor</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">		
	<meta name ="viewport" content="width=device-width, height=device-height, initial-scale=1" />

<!--
    <link rel="stylesheet" href="<%=httpBaseUrl$~%>/js/jquery.mobile-1.4.5.min.css" />	
	<script src="<%=httpBaseUrl$~%>/js/jquery.min.js"></script>
	<script src="<%=httpBaseUrl$~%>/js/jquery.mobile-1.4.5.min.js"></script>			
	-->
     <link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css" />
     <script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
     <script src="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>	
	
	<script src="<%=httpBaseUrl$~%>/$/wsp/vttemplate.js"></script>	
	
	<script src="<%=appBaseUrl$~%>/cxv/cxv_json.js"></script>		
	<script src="<%=appBaseUrl$~%>/cxv/cxv_const.js"></script>		
	<script src="<%=appBaseUrl$~%>/cxv/cxv_ccxml.js"></script>	
	<script src="<%=appBaseUrl$~%>/cxv/cxv_vxml.js"></script>	
	<script src="<%=appBaseUrl$~%>/cxv/cxv_report.js"></script>	
	<script src="<%=appBaseUrl$~%>/cxv/cxv_trunk.js"></script>	
	<script src="<%=appBaseUrl$~%>/cxv/cxv_message.js"></script>		
	<script src="<%=appBaseUrl$~%>/util/vthttpc.js"></script>	
	<script src="<%=appBaseUrl$~%>/view/vtview.js"></script>	
	

    <script type="text/javascript">
	    var TRANSLATE$= "translate";
        var QTIMEOUT$ = 10*1000;
	    var sessionid$ = "<%=VTServer.getUID()~%>"; // sessionid
	    var tid$ = "<%=VTServer.getUID()~%>";       // connectionid 
	    var callid$ = "<%=VTServer.getUID()~%>";    // connectionid 
		var caller$ = "<%=VTRequest.getValue('caller')~%>";
		var callee$ = "";//<%=VTRequest.getValue('callee')~%>";
		var hybrid$ = "<%=VTRequest.getValue('hybrid','off')~%>";
		var ccxmlvalue$ = {};
		var ack$ = {};
		
	
		
		function _transformResult$(cxvm,status,content)
		{			
            console.log("_transformResult:"+status);
			if(status == 'success' )				
			{
				//var content= xResponse.getData();
                // console.log("_transformResult.success="+content);

				$("#vtdialog").empty();
				$(content).insertAfter ("#home");
				$.mobile.changePage($("#vtdialog"));
			}				
			else //if((++errorCount$) > 0)
			{		
                 console.log("error="+content);
			     socket$.disconnect();
			}			
		}

        function _transformRequest$(cxvm) 
	    {

			var templateUrl = VTView.getTemplateUrl(cxvm);
			if(templateUrl)
			{
			      VTView.transform(cxvm,templateUrl,_transformResult$);

			}
			else
			{
				_transformResult$(cxvm,"error","VTView.getTemplateUrl() failed");
			}
		}
        
        
        function _quitClick$(immediate) 
	    { 		  
		
          // alert("_quitClick$");		
     	   var cxvm =  _make_CONNECTION_DISCONNECTED(callid$);
		   _transformRequest$(cxvm);
  		   socket$.disconnect();
		   		 
	    }
  	    
		function _telephoneClick$() 
	    {	
           //alert("telephone");
           location.href  = "tel:070-7012-9440";
	    }
	    
	    
    //===============================window ====================================
     window.onload = function()
	 {				
			//alert("load");
			// request start call		   
	 }
		
      window.onblur = function (){
	     //document.title='NOT FOCUSED'
		 //socket$.emit("browser-status","NOT_FOCUSED");
		 //alert("NOT_FOCUSED");
		 _send_BROWSER_STATUS("NOT_FOCUSED");


      }
      
	  window.onfocus = function (){
	     //document.title='FOCUSED'
		 //socket$.emit("browser-status","FOCUSED");
		 //alert("FOCUSED");
		  _send_BROWSER_STATUS("FOCUSED");
	  }
		
		
    // Set the name of the hidden property and the change event for visibility
      var hidden, visibilityChange; 
     if (typeof document.hidden !== "undefined") { // Opera 12.10 and Firefox 18 and later support 
       hidden = "hidden";
       visibilityChange = "visibilitychange";
     } else if (typeof document.mozHidden !== "undefined") {
        visibilityHidden = "mozHidden";
        visibilityChange = "mozvisibilitychange";	  
     } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
        visibilityChange = "msvisibilitychange";
     } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
        visibilityChange = "webkitvisibilitychange";
    }
     
    //var videoElement = document.getElementById("videoElement");

    // If the page is hidden, pause the video;
    // if the page is shown, play the video
    function handleVisibilityChange() {
	   //$('body').html(document.visibilityState);
       if (document[hidden]) {
	     //alert("CLOSED"); 
		 //socket$.emit("browser-status","CLOSED");
		  _send_BROWSER_STATUS("CLOSED");
		  //_send_CONNECTION_DISCONNECTED(callid$);

         ;//videoElement.pause();
       } else {
	     //alert("SHOWN"); 
		 //socket$.emit("browser-status","SHOWN");
          ;//videoElement.play();
		 _send_BROWSER_STATUS("SHOWN");
       }
    }
	
	//alert(visibilityChange);

    // Warn if the browser doesn't support addEventListener or the Page Visibility API
    if (typeof document.addEventListener === "undefined" || typeof document[hidden] === "undefined") {
        ;//alert("This demo requires a browser, such as Google Chrome or Firefox, that supports the Page Visibility API.");
    } else {
       // Handle page visibility change   
       document.addEventListener(visibilityChange, handleVisibilityChange, false);    
       // When the video pauses, set the title.
       // This shows the paused

     }
	    


	//===================================================================================
	
    function  _emit_cxvm$(cxvm)
	{
        var  jstr = cxvm.stringify();	
		console.log("_emit_cxvm$:"+jstr);
		socket$.emit(cxvm.type,jstr);				
	}	
	function  _make_CONNECTION_ALERTING(sessionid,connectionid,caller,callee,info)
    {

        var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);

        cxvm.name = CXVConst.CXVCCXML_ALERTING;

        cxvm.ccxml.alerting = new CXVCcxmlAlerting();
		
        cxvm.ccxml.alerting.sessionid = sessionid;
        cxvm.ccxml.alerting.connectionid = connectionid;
        cxvm.ccxml.alerting.caller = caller;
        cxvm.ccxml.alerting.callee = callee;
        //cxvm.ccxml.alerting.mode = mode;
		
        cxvm.ccxml.alerting.protocolName ="ws";
        cxvm.ccxml.alerting.protocolVersion ="1.0";	
        cxvm.ccxml.alerting.info=info;
		
        return cxvm;
		
    }
	function  _make_CONNECTION_CONNECTED(connectionid)
    {

        var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);

        cxvm.name = CXVConst.CXVCCXML_CONNECTED;


        cxvm.ccxml.connected = new CXVCcxmlConnected();
		
        cxvm.ccxml.connected.connectionid = connectionid;

        return cxvm;
		

    }
	function  _make_CONNECTION_DISCONNECTED(connectionid)
    {
        var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);
        cxvm.name = CXVConst.CXVCCXML_DISCONNECTED;

        cxvm.ccxml.disconnected = new CXVCcxmlDisconnected();		
        cxvm.ccxml.disconnected.connectionid = connectionid;
		return cxvm;
		
    }
	function  _make_CONNECTION_REDIRECTED(connectionid)
    {
        var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);
        cxvm.name = CXVConst.CXVCCXML_REDIRECTED;

        cxvm.ccxml.redirected = new CXVCcxmlRedirected();		
        cxvm.ccxml.redirected.connectionid = connectionid;
		cxvm.ccxml.redirected.reason="";
		return cxvm;
		
    }

	function  _make_CCXML_START(sessionid,tid,ccxmlurl,ccxmlvalues)
    {
        var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);
        cxvm.name = CXVConst.CXVCCXML_START;
        cxvm.ccxml.start = new CXVCcxmlStart();		
		cxvm.ccxml.start.sessionid=sessionid;
        cxvm.ccxml.start.tid = tid;
		cxvm.ccxml.start.ccxmlurl=ccxmlurl;
		cxvm.ccxml.start.ccxmlvalues=ccxmlvalues;
		return cxvm;
		
    }

	function  _make_CCXML_FIND(tid,caller,callee)
    {
        var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);
        cxvm.name = CXVConst.CXVCCXML_FIND;

        cxvm.ccxml.find = new CXVCcxmlFind();		
        cxvm.ccxml.find.tid = tid;
		cxvm.ccxml.find.caller=caller;
		cxvm.ccxml.find.callee=callee;
		return cxvm;
		
    }
     function  _make_CCXML_EVENT(source,target,eventid,eventname,contenttype,contentdata)
	 {
        var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);
        cxvm.name = CXVConst.CXVCCXML_EVENT;
        cxvm.ccxml.event= new CXVCcxmlEvent();		
		
		
		cxvm.ccxml.event.source = source;
		cxvm.ccxml.event.target = target;
		cxvm.ccxml.event.eventid = eventid;
		cxvm.ccxml.event.eventname = eventname;
		cxvm.ccxml.event.ctype = contenttype;
		cxvm.ccxml.event.cdata = contentdata;
        return cxvm;		
				 
	 }

	function  _send_CCXML_FIND(tid,caller,callee)
	{
		var cxvm =  _make_CCXML_FIND(tid,caller,callee);
        _emit_cxvm$(cxvm);		
	}
	
	function  _send_CONNECTION_ALERTING(sessionid,connectionid,caller,callee,info)
    {

        var cxvm = _make_CONNECTION_ALERTING(sessionid,connectionid,caller,callee,info);

		
        _emit_cxvm$(cxvm);
		
    }

	function  _send_CONNECTION_CONNECTED(connectionid)
    {
        var cxvm = _make_CONNECTION_CONNECTED(connectionid);
        _emit_cxvm$(cxvm);
		

    }

	function  _send_CONNECTION_DISCONNECTED(connectionid)
    {
        var cxvm = _make_CONNECTION_DISCONNECTED(connectionid);
        _emit_cxvm$(cxvm);
		
    }
	function  _send_CONNECTION_REDIRECTED(connectionid)
    {
        var cxvm = _make_CONNECTION_REDIRECTED(connectionid);
        _emit_cxvm$(cxvm);
		
    }

	function  _send_CCXML_START(sessionid,tid,ccxmlurl,ccxmlvalues)
    {
        var cxvm = _make_CCXML_START(sessionid,tid,ccxmlurl,ccxmlvalues);
        _emit_cxvm$(cxvm);
		
    }
	
    function _send_BROWSER_STATUS(status)
	{

      /*		
        var cxvm = _make_CCXML_EVENT(callid$,sessionid$,"","browser.status","application/json",JSON.stringify({connectionid:callid$,status:status}));
        _emit_cxvm$(cxvm);
	  */	
		 
		
	}
	
   //=============================== SOCKET IO ========================================
	

	    var webSocketUrl = '<%=wsBaseUrl$~%>' + '/cxv?name='+caller$;
	    var socket$  =  new WebSocket(webSocketUrl,'cxv');
        	
		socket$.disconnect=function()
		{
		    socket$.close();
		};
		
		socket$.emit=function(name,data)
		{
			var jdata = {name:name,data:data};

            socket$.send(JSON.stringify(jdata)); 			
			
		};
		
		
		socket$.onopen = function(openEvent) {
			console.log("onopen");
			//alert(".onopen");
            ;//console.log("WebSocket OPEN: " + JSON.stringify(openEvent, null, 4));
        };

        socket$.onclose = function (closeEvent) {
			console.log("onclose");
            //console.log("WebSocket CLOSE: " + JSON.stringify(closeEvent, null, 4));
			//alert(".onclose");
		   _quitClick$(true);

        };

        socket$.onerror = function (errorEvent) {
			//alert(".onerror:"+JSON.stringify(errorEvent, null, 4));
           //console.log("WebSocket ERROR: " + JSON.stringify(errorEvent, null, 4));
        };

        socket$.onmessage = function (messageEvent) {
			//alert(".onmesage:"+messageEvent.data);
            var jdata = JSON.parse(messageEvent.data);
			console.log("onmessage:"+jdata.name);

			//alert(".onmesage:"+jdata.name);
             			
            ;//console.log("WebSocket MESSAGE: " + wsMsg);
			switch(jdata.name)
			{
				
				case "ack":
				     _onAck(jdata.data);
				    break;
				case "nack":
				     _onNak(jdata.data);
				    break;
			    case CXVConst.CXV_TYPE_CCXML:
				     _onCCXML(jdata.data);
				   
				    break;
			    case CXVConst.CXV_TYPE_VXML:
				     _onVXML(jdata.data);
				    break;
				default:
				    socket$.disconnect();
                    break;				
				
			}
        };
        var _onNak = function(jstr) {
			
			   var jnack = JSON.parse(jstr);
			   
			   
				
		};
		
        var _onAck = function(jstr) {
			
	
	        //console.log(jstr);
        	ack$ = JSON.parse(jstr);			

		    ack$.startup.caller =caller$;
			ccxmlvalue$.startup=ack$.startup;

	        //alert(jstr); 		
			console.log("ack$.rcid="+ack$.rcid);
			VTView.set_rcid(ack$.rcid);

			//console.log("mode="+mode$);
			if(hybrid$=="on")
			{
				_send_CCXML_FIND(tid$,caller$,callee$);
			}
			else
			{
				_send_CCXML_START(sessionid$,tid$,ack$.startup.url.ccxml,ccxmlvalue$);
			}
    	   
			
			
        };
        var _onCCXML = function(jstr) {
		
			var cxvm = new CXVMessage(CXVConst.CXV_TYPE_CCXML);
            //alert("onCCXML:"+jstr);
			if(cxvm.parse(jstr))
			{
               console.log("onCCXML:"+cxvm.name);
               switch(cxvm.name) 			
			   {
	            case CXVConst.CXVCCXML_FOUND:
				     sessionid$= cxvm.ccxml.found.sessionid;
	                  _send_CONNECTION_ALERTING(cxvm.ccxml.found.sessionid,callid$,caller$,callee$,{});				
				     break;
	            case CXVConst.CXVCCXML_NOTFOUND:
				     _send_CCXML_START(sessionid$,tid$,ack$.startup.url.ccxml,ccxmlvalue$);
				     break;
	            case CXVConst.CXVCCXML_STARTED:
				     //sessionid$= cxvm.ccxml.started.sessionid;
	                 _send_CONNECTION_ALERTING(cxvm.ccxml.started.sessionid,callid$,caller$,callee$,{});				
				     break;
	            case CXVConst.CXVCCXML_NOTSTARTED:
					_quitClick$(true);
				     break;
	            case CXVConst.CXVCCXML_ACCEPT:
                    _send_CONNECTION_CONNECTED(cxvm.ccxml.accept.connectionid);
                    break;
                case CXVConst.CXVCCXML_REJECT:
					_quitClick$(true);
                    break;
                case CXVConst.CXVCCXML_DISCONNECT:
                    _send_CONNECTION_DISCONNECTED(cxvm.ccxml.disconnect.connectionid);
					if(cxvm.ccxml.disconnect.connectionid == callid$)
					   _quitClick$(true);
                    break;
                case CXVConst.CXVCCXML_REDIRECT:
				    location.href  = "tel:"+cxvm.ccxml.redirect.dest;//queryUrl + "?"+queryData;
	                //_send_CONNECTION_REDIRECTED(cxvm.cc.redirect.connectionid);
	                _send_CONNECTION_REDIRECTED(cxvm.ccxml.redirect.connectionid);
					
				
                    break;
                case CXVConst.CXVCCXML_CREATECALL:
				    location.href  = "tel:"+cxvm.ccxml.createcall.dest;//queryUrl + "?"+queryData;
                    _send_CONNECTION_CONNECTED(cxvm.ccxml.createcall.connectionid);
                    break;
			   }			
			}
				
		};


         var _onVXML = function(jstr) {
			var cxvm = new CXVMessage(CXVConst.CXV_TYPE_VXML);
			console.log(jstr);
			if(cxvm.parse(jstr))
			{
			    var form = cxvm.vxml.form;
			   
			    _setEventDispatch$(_dummyEventReceiver$);

               switch(cxvm.name) 		
			   {
				case CXVConst.CXVVXML_PLAY_REQUEST:
				   //if(form.id != "WebVoiceARS" && form.element != 'receive')
				     
					 _transformRequest$(cxvm);
				   break;

				case CXVConst.CXVVXML_COLLECT_REQUEST:
				case CXVConst.CXVVXML_RECORD_REQUEST:
				   _transformRequest$(cxvm);
				   break;
				case CXVConst.CXVVXML_OBJECT_REQUEST:
				    break;
				case CXVConst.CXVVXML_EVENT:
				    break;
				case CXVConst.CXVVXML_STOP:
					eventDispatch$(CXVConst.CXV_TYPE_VXML,cxvm);
				    break;
				   				  
			   }				   
			    
	        }
        };
		
		var eventDispatch$ = function(type,name){};

        function _dummyEventReceiver$(type,cxvm)
		{

		}
        function _setEventDispatch$(cb)
        {  
		     eventDispatch$ = cb;
        } 		
		
  </script>	

</head>

<body>

  <div data-role="page" id="home"> 
     <div data-role="content">
	    <center>
		   <img src="cxv/cxv-icon-5.png" title="cxv"/>
		   <h1> Welcome to VTNode </h1>
		</center>   
	</div>	
  </div>

  

</body>
</html>
