<%?
 
  var cxvm$   = VTTemplate.Args.cxvm;
  var mmi$    = cxvm$.vxml.reqCollect.promptq.mmi;
  var promptq$ =  cxvm$.vxml.reqCollect.promptq;  
  var medias$ = cxvm$.vxml.reqCollect.promptq.medias;
  //var mp3enabled$ = mmi$.interaction.extra.mp3enabled;//cxvm$.audio.enabled; 
 
 
 
 function _getAudioItem$(pos)
 { 
     for(i in medias$.mediaList){
		 //var mi = medias$.mediaList[i];
		 //console.log("pos="+mi.url);
	     if((--pos) == 0)
		    return medias$.mediaList[i];
	 }
	 return null;	 
 }
 

 function _getViewExtraValue$(name)
 {
    var  extra = mmi$.interaction.extra; 
	if(extra)
	{
        // first, lookup promptq
        //console.log("_getViewPropertyValue$("+name+")");
        for (i in extra)
        {
	      if(i == name)
		    return extra[i];
	    }
    }	
    //console.log("_getViewPropertyValue$("+name+")="+value);	
	return null;
 }

 function _getViewTitle$()
 {
    var value = _getViewExtraValue$("title");
	if(typeof(value) != "string" )
	   value =  "";
	return value.trim();   	
 }
 
 function _getViewText$()
 {
    var value = _getViewExtraValue$("text");
	if(typeof(value) != "string" )
	{
	   var ai = _getAudioItem$(1);
	   if(ai )
	     value = ai.text;
	   else 
         value="???";	   
	}
	return value.trim();   	
 }
 
  
 function _getInputType$()
 {
 /*
     var input = _getViewPropertyValue$("input");
	 if(input != undefined)
	 {
     if(input.type == 'digits')
	    return 'number';		
     if(input.type == 'date')
	    return 'date';
     if(input.type == 'currency')
	    return 'number';
     if(input.type == 'number')
	    return 'number';
		
     if(input.type == 'phone')
	    return 'tel';
		
     if(input.type == 'time')
	    return 'time';
 
     }
	 */
     return "text" ;
 }
 
 
 var dtmfGrammarList$ = cxvm$.vxml.reqCollect.grammarDtmf.grammarList;
 var speechGrammarList$ = cxvm$.vxml.reqCollect.grammarSpeech.grammarList;

 
 function _getMenuList$()
 { 
   
    var menuList = new Array();

	

	this.getGrammar = function(pos,mode)
	{
	   var gram = undefined;
	   
	   if(mode == "dtmf")
	   {
	      if(dtmfGrammarList$.length > pos)
    		  gram = dtmfGrammarList$[pos];
	      
	   }
	   else if(speechGrammarList$.length > pos)
	   {
		  gram = speechGrammarList$[pos];
	   }
	   
	   if(gram )
	   { 
	      if(gram.type == "grammar/choice")
	          return gram;
	    }
	   return undefined;	  
	};
	
		
    // {text:"...",mode:"dtmf or voice",utterance:"..."};
	 
	 var pos=0;
	 
	 while(true)
	 {
	     var dtmf = this.getGrammar(pos,"dtmf");
	     var speech = this.getGrammar(pos,"speech");
		 
		 if(!dtmf   && !speech)
		    break;
			
		var item = new Object();
		if(speech)
		{
		   item.text = speech.rule;
           item.mode="speech";
           item.utterance = speech.rule; 	
           item.id = speech.id;		   
		}
		
		if(dtmf)
		{
		   if(!speech )		   
		      item.text =  dtmf.rule;
           item.mode = "dtmf";
           item.utterance = dtmf.rule; 	
           item.id = dtmf.id;		   
		}
		
		menuList[pos] = item;
        //menuList.push(item);
		pos++;
		 
	 }
	 
	 return menuList;
 }
 
  function _getButtonList$()
  {
   return new Array();
  }
~%>

<div data-role="page" id="vtdialog" > 
		<div data-role="header" data-position="fixed">
			 <h1><%=_getViewTitle$()~%> </h1>
		</div>
        <div id="audioControl"></div>		

		<div data-role="content">
			<center><p><%=_getViewText$()~%> </p></center>
		</div>		

        <div data-role="content">
          <ul data-role="listview" data-inset="true"> 		
			  <li data-role="list-divider"></li>		  
        	  <%?
			    var _menus = _getMenuList$();//ViewPropertyValue$("menus");
			   for(var i=_menus.length-1; i >=0;i--){
				  var m = _menus[i];~%>				  
  		     	   <li ><a href="javascript:_collectResultMenu$(true,'<%=m.mode~%>','<%=m.utterance~%>','<%=m.id~%>')"> <%=m.text~%> </a></li>				   
		      <%? } ~%>
		  </ul>	 
		</div>
		
		<div data-role="content" >
        	<%?
			   var _buttons = _getButtonList$();
			   for(i in _buttons) {
				  var b = _buttons[i]; ~%>
  		     	  <button type="button" data-icon="arrow-l" data-iconpos="left" 
				          onclick="_collectResult$(true,'<%=b.onclick.mode~%>','<%=b.onclick.utterance~%>')"> <%=b.text~%> </button>
		    <%? }~%>
		</div>
		<div data-role="footer" data-position="fixed">
		      <div data-role="navbar" >
				<ul data-inset="true">				
					<li><a  onclick="javascript:_quitClick$(true)" >종료</a></li>
					<!--
					<li><a  onclick="_telephoneClick$()">전화</a></li>
					-->
				</ul>
			   </div>
		</div>
		
		
		
<script>
      <![CDATA[

        var dialogid$="<%=cxvm$.vxml.dialogid~%>";	   	  
        var id$="<%=cxvm$.vxml.id~%>";	   	  
        var syncid$="<%=cxvm$.vxml.syncid~%>";	   	  

		var _audioTranslateResult=function(success,jvalue)
		{
			if(success)
			{
			   var html= '<audio style="width: 100%;" controls>';
			   html +=  '<source src="' + jvalue.url+'" type="audio/mpeg" preload="auto" /> ';
			   html +=  '</audio>';
				$('#audioControl').html(html);
			}

		}

		<%?
		  var ai = _getAudioItem$(1);
		  if(ai ) {   
		      var query="";
			 if(ai.url.length > 0 )
			 {
			    if(ai.urltype =="audio/wav" || ai.urltype =="audio/x-wav")
			    {
			      //IVR2Ejs.Write("VTView.wav2mp3(ai.url,_translateResult);"); 
			      query += "VTView.wav2mp3(";
			      query +=  '"'+ ai.url +'"';
			      query += ",_audioTranslateResult);";
			    }
			    else if(ai.urltype =="audio/mpeg") 			  
			    {

			      //IVR2Ejs.Write("VTView.local2public(ai.url,_translateResult);"); 
			      query += "VTView.local2public(";
			      query += '"'+ ai.url +'"';
			      query += ",_audioTranslateResult);";

			    }
		    }
			else  if(ai.text.length >0)
			{
			   var lang= promptq$.lang;
			   if(lang.length <=0)
			       lang = promptq$.ttslang;
			      
			   //if(ai.textype.indexOf("text") >=0) 
			   {
				   var text = ai.text.replace(/(\r\n|\n|\r)/gm, "");

			     //IVR2Ejs.Write("VTView.text2mp3(ai.text,ai.texttype,_translateResult);"); 
			     query +="VTView.text2mp3(";
			     query += '"'+ text +'"';
			     query += ',"'+ ai.texttype +'"';
			     query += ',"'+ lang +'"';
			     query += ",_audioTranslateResult);";

			    }
		    }

			  if(query.length > 0 )
			  {

				 VTTemplate.Write(query);
			  }
		 } ~%>





        function _collectResultMenu$(selected,inputmode,utterance,grammarId) //,utterance,interpretation) 
	    {				

           var resMsg = new CXVMessage(CXVConst.CXV_TYPE_VXML);

           resMsg.name = CXVConst.CXVVXML_COLLECT_RESULT;
           resMsg.vxml.dialogid = dialogid$;
           resMsg.vxml.id = id$;
           resMsg.vxml.syncid = syncid$;
           resMsg.vxml.resCollect = new CXVVxmlCollectResult();
		   
		   
		   if(selected)
		   {
		     var nlsmlResult = VTView.nlsml_generate_filled_result(utterance,inputmode,"1.0",grammarId);
		     resMsg.vxml.resCollect.result = new CXVVxmlResultInfo(true, CXVConst.CXVVXML_COLLECT_RESULT_FILLED, "application/nlsml+xml",nlsmlResult);
		   }
		   else 
           {		   
		     resMsg.vxml.resCollect.result = new CXVVxmlResultInfo(true, CXVConst.CXVVXML_COLLECT_RESULT_EVENT, "text/plain","stop");
		   }
		      
		   /*
		   resMsg.vxml.resCollect.result = new CXVVxmlResultInfo(true, eventName, "","");
           resMsg.vxml.resCollect.inputmode = inputmode;
           resMsg.vxml.resCollect.recgrammar = grammarId;
           resMsg.vxml.resCollect.utterance = utterance;
           resMsg.vxml.resCollect.delimiter = "|";
           resMsg.vxml.resCollect.interpdata ="";
           resMsg.vxml.resCollect.interptype ="";
           resMsg.vxml.resCollect.confidence = 1.0;
		   */
		   
			
		   _emit_cxvm$(resMsg);	



        }
		
	    function _eventReceiver$(type,cxvm)
	    {		
		    if(cxvm.name == CXVConst.CXVVXML_STOP)
               _collectResultMenu$(false,"","",""); //,utterance,interpretation) 
			
	    }
	    _setEventDispatch$(_eventReceiver$); 
		
   ]]>		
</script>
		          
</div>	
		
