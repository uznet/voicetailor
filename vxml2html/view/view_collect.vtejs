<%?
 
  var cxvm$    = VTTemplate.Args.cxvm;
  var promptq$ = cxvm$.vxml.reqCollect.promptq;
  var mmi$     = cxvm$.vxml.reqCollect.promptq.mmi;
  var medias$  = cxvm$.vxml.reqCollect.promptq.medias;
  var dtmfGrammarList$=cxvm$.vxml.reqCollect.grammarDtmf.grammarList;
  var speechGrammarList$=cxvm$.vxml.reqCollect.grammarSpeech.grammarList;
  

  //var inputmode$ = promptq$.inputmode;
 function _getAudioItem$(pos)
 { 
     for(i in medias$.mediaList){
	     if((--pos) == 0)
		    return medias$.mediaList[i];
	 }
	 return null;
	 
 }

 function _getViewExtraValue$(name)
 {
    var  extra=  mmi$.interaction.extra;
	if(extra)
	{
        // first, lookup promptq
        //console.log("_getViewPropertyValue$("+name+")");
        for (i in extra)
        {
	      if(i == name)
		  {
		    return   extra[i];
		 }
	   }
    }	
    //console.log("_getViewPropertyValue$("+name+")="+value);	
	return null;
 }

 
 function _getViewTitle$()
 {
    var value = _getViewExtraValue$("title");
	if(typeof(value) != "string" )
	   value =  "";
	return value.trim();   	
 }

 function _getViewText$()
 {
    var value = _getViewExtraValue$("text");
	if(typeof(value) != "string" )
	{
	   var ai = _getAudioItem$(1);
	   if(ai )
	     value = ai.text;
	   else 
         value="???";	   
	}
	return value.trim();   	
 }

  
 function _getInputType$()
 {
     var inputtype= "number";
     var inputmode =  cxvm$.vxml.reqCollect.inputmode;

	 if(inputmode.indexOf("speech") >=0 || inputmode.indexOf("voice") >=0 )
	     inputtype = "text";
		 
	 return inputtype;
	 
 /*
     var input = _getViewPropertyValue$("input");
	 if(input != undefined)
	 {
     if(input.type == 'digits')
	    return 'number';		
     if(input.type == 'date')
	    return 'date';
     if(input.type == 'currency')
	    return 'number';
     if(input.type == 'number')
	    return 'number';
		
     if(input.type == 'phone')
	    return 'tel';
		
     if(input.type == 'time')
	    return 'time';
 
     }
     return "number" ;
	 */
 }
 
 
~%>

    


	<div data-role="page" id="vtdialog"> 
		<div data-role="header" data-position="fixed">
			<h1><%=_getViewTitle$()~%> </h1>
		</div>

		<div id="audioControl"></div>


		
		<div data-role="content">
			<center><p><%=_getViewText$()~%> </p></center>	
            
         	   <input type="<%=_getInputType$()~%>" id="uinput" value=""/>
        	   <button data-inline="true"  onclick="_inputComplete$('uinput')">입력완료</button>	
				
			
		</div>

		<div data-role="footer" data-position="fixed">
		      <div data-role="navbar" >
				<ul data-inset="true">
					<li><a  onclick="javascript:_quitClick$(true)" >종료</a></li>
				</ul>
			  </div>
		</div>



<script>
      <![CDATA[
        var dialogid$ ="<%=cxvm$.vxml.dialogid~%>";	   	  
        var id$ ="<%=cxvm$.vxml.id~%>";	   	  
        var syncid$="<%=cxvm$.vxml.syncid~%>";	   	  
        var inputmode$ ="<%=promptq$.inputmode~%>";
        var dtmfgramid$="<%=dtmfGrammarList$.length > 0 ? dtmfGrammarList$[0].id :'' ~%>";
        var speechgramid$="<%=speechGrammarList$.length > 0 ? speechGrammarList$[0].id :'' ~%>";
        
        	      
    
       

		var _audioTranslateResult=function(success,jvalue)
		{
			if(success)
			{
			   var html= '<audio style="width: 100%;" controls>';
			   html +=  '<source src="' + jvalue.url+'" type="audio/mpeg" preload="auto" /> ';
			   html +=  '</audio>';
				$('#audioControl').html(html);
			}

		}

		<%?
		  var ai = _getAudioItem$(1);
		  if(ai ) {   
		      var query="";
			 if(ai.url.length > 0 )
			 {
			    if(ai.urltype =="audio/wav" || ai.urltype =="audio/x-wav")
			    {
			      //IVR2Ejs.Write("VTView.wav2mp3(ai.url,_translateResult);"); 
			      query += "VTView.wav2mp3(";
			      query +=  '"'+ ai.url +'"';
			      query += ",_audioTranslateResult);";
			    }
			    else if(ai.urltype =="audio/mpeg") 			  
			    {

			      //IVR2Ejs.Write("VTView.local2public(ai.url,_translateResult);"); 
			      query += "VTView.local2public(";
			      query += '"'+ ai.url +'"';
			      query += ",_audioTranslateResult);";

			    }
		    }
			else  if(ai.text.length >0)
			{
			   var lang= promptq$.lang;
			   if(lang.length <=0)
			       lang = promptq$.ttslang;
			      
			   //if(ai.textype.indexOf("text") >=0) 
			   {
                   var text = ai.text.replace(/(\r\n|\n|\r)/gm, "");

			     //IVR2Ejs.Write("VTView.text2mp3(ai.text,ai.texttype,_translateResult);"); 
			     query +="VTView.text2mp3(";
			     query += '"'+ text +'"';
			     query += ',"'+ ai.texttype +'"';
			     query += ',"'+ lang +'"';
			     query += ",_audioTranslateResult);";

			    }
		    }

			  if(query.length > 0 )
			  {

				 VTTemplate.Write(query);
			  }
		 } ~%>
		


        function _collectResult$(eventName,inputmode,utterance) //,utterance,interpretation) 
	    {
		
			   //alert(_collectResult);
           var resMsg = new CXVMessage(CXVConst.CXV_TYPE_VXML);

           resMsg.name = CXVConst.CXVVXML_COLLECT_RESULT;
           resMsg.vxml.dialogid = dialogid$;
           resMsg.vxml.id = id$;
           resMsg.vxml.syncid = syncid$;
           resMsg.vxml.resCollect = new CXVVxmlCollectResult();
		   
		   
		   if(eventName==CXVConst.CXVVXML_COLLECT_RESULT_UTTERANCE)
		   {
		     var grammarId = inputmode == "dtmf" ? dtmfgramid$ : speechgramid$; 
		     var nlsmlResult = VTView.nlsml_generate_filled_result(utterance,inputmode,"1.0",grammarId);
		   
		     resMsg.vxml.resCollect.result = new CXVVxmlResultInfo(true, CXVConst.CXVVXML_COLLECT_RESULT_FILLED, "application/nlsml+xml",nlsmlResult);
		   }
		   else 
           {		   
		     resMsg.vxml.resCollect.result = new CXVVxmlResultInfo(true, CXVConst.CXVVXML_COLLECT_RESULT_EVENT, "text/plain","stop");
		   }
		   /*
		   resMsg.vxml.resCollect.result = new CXVVxmlResultInfo(true, eventName, "","");
           resMsg.vxml.resCollect.inputmode = inputmode;
           resMsg.vxml.resCollect.recgrammar = "";
           resMsg.vxml.resCollect.utterance = utterance;
           resMsg.vxml.resCollect.delimiter = "|";
           resMsg.vxml.resCollect.interpdata ="";
           resMsg.vxml.resCollect.interptype ="";
           resMsg.vxml.resCollect.confidence = 1.0;
		   */
			
		   _emit_cxvm$(resMsg);	
		

        }
		
		function _isOnlyDigits(s) 
		{
          for (var i = 0;  i < s.length;  i++) 
		  {
            var d = s.charCodeAt(i);
			if( (d < 48 || d > 57) && (d != 35 && d != 42))
			{
			    return false;
			}
          }
          return true
        }
		
		
        function _inputComplete$(id) //,utterance,interpretation) 
		{		
			var uinput = document.getElementById(id);
			
			if(uinput)
            {	
               var utter = uinput.value;		
			   //alert(utter);
    		   if(utter.length > 0)
		    	{				
		    	   
		    	    
				   _collectResult$(CXVConst.CXVVXML_COLLECT_RESULT_UTTERANCE,_isOnlyDigits(utter) ? "dtmf" : "speech",utter);
			    }
				else
				{
					   alert("입력된값이 없음!!!");
				}
			}				
		}
		
		function _eventReceiver$(type,cxvm)
		{
		    if(cxvm.name == CXVConst.CXVVXML_STOP)
			{
			   _collectResult$(CXVConst.CXVVXML_COLLECT_RESULT_NOINPUT,"","");
			}
		}

		_setEventDispatch$(_eventReceiver$); 
		]]>
</script>
		
	</div>	

